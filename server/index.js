import path from 'path';
import fs from 'fs';

import express from 'express';
import { ChunkExtractor } from '@loadable/server'

import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';

import MainFrame from '../src/MainFrame';
import PhotoContextProvider from "../src/context/PhotoContext";

const PORT = process.env.PORT || 3006;
const app = express();

app.use('/SnapShot', express.static('build'))

app.get('/', (req, res) => {
    const context = {};
    const app = (
        <PhotoContextProvider>
            <StaticRouter location={req.url} context={context}>
                <MainFrame />
            </StaticRouter>
        </PhotoContextProvider>
    );

    
    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve('server-build/loadable-stats.json');
    // We create an extractor from the statsFile
    const extractor = new ChunkExtractor({ statsFile });
    // Wrap your application using "collectChunks"
    const jsx = extractor.collectChunks(app);
    // Render your application
    const html = renderToString(jsx);
    // You can now collect your script tags
    const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();
    // You can also collect your "preload/prefetch" links
    const linkTags = extractor.getLinkTags() // or extractor.getLinkElements();
    // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();

    console.log("script", scriptTags);
    console.log("linkTags", linkTags);
    console.log("styleTags", styleTags);
  
    const indexFile = path.resolve('./build/index.html');
    fs.readFile(indexFile, 'utf8', (err, data) => {
      if (err) {
        console.error('Something went wrong:', err);
        return res.status(500).send('Oops, better luck next time!');
      }
  
      return res.send(
        data
            .replace('<div id="root"></div>', `<div id="root">${html}</div>`)
            // .replace('<head>', `<hread>${scriptTags}${styleTags}\n${linkTags}`)
      );
    });
  });
  
  app.use(express.static('./build'));
  
  app.listen(PORT, () => {
    console.log(`Server is listening on port ${PORT}`);
  });